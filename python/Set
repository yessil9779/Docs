* Примечание. Элементы набора нельзя изменить, но вы можете удалять их и добавлять новые.
* Примечание. Наборы неупорядочены, поэтому вы не можете быть уверены, в каком порядке будут появляться элементы.
* После создания набора вы не можете изменять его элементы, но можете удалять элементы и добавлять новые.
* Примечание. Значения True и 1считаются одними и теми же значениями в наборах и рассматриваются как дубликаты:
  thisset = {"apple", "banana", "cherry", True, 1, 2}
* Примечание. Значения False и 0считаются одними и теми же значениями в наборах и рассматриваются как дубликаты:
  thisset = {"apple", "banana", "cherry", False, True, 0}
* Примечание. Если удаляемый элемент не существует, remove() возникнет ошибка.
* Примечание. Если удаляемый элемент не существует, discard() НЕ приведет к возникновению ошибки.
* Примечание. Оба варианта union()и update() исключают любые повторяющиеся элементы.
--------------------------------------------------access items
thisset = {"apple", "banana", "cherry"}
for x in thisset:
  print(x)
-------
thisset = {"apple", "banana", "cherry"}
print("banana" in thisset)
--------------------------------------------------ADD
thisset = {"apple", "banana", "cherry"}
thisset.add("orange")
print(thisset)
-------
thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}
thisset.update(tropical)
print(thisset)
-------
thisset = {"apple", "banana", "cherry"}
mylist = ["kiwi", "orange"]
thisset.update(mylist)
print(thisset)
--------------------------------------------------remove
thisset = {"apple", "banana", "cherry"}
thisset.remove("banana")
thisset.discard("banana")
print(thisset)
-------
#Удалите случайный элемент, используя pop() метод:
thisset = {"apple", "banana", "cherry"}
x = thisset.pop()
print(x)
print(thisset)
-------
#Метод clear() очищает набор:
thisset = {"apple", "banana", "cherry"}
thisset.clear()
print(thisset)
-------
#Ключевое delслово полностью удалит набор:
thisset = {"apple", "banana", "cherry"}
del thisset
print(thisset)
--------------------------------------------------loop
thisset = {"apple", "banana", "cherry"}
for x in thisset:
  print(x)
--------------------------------------------------join
#Метод union()возвращает новый набор со всеми элементами из обоих наборов:
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set3 = set1.union(set2)
print(set3)
-------
#Метод update()вставляет элементы из набора 2 в набор 1:
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set1.update(set2)
print(set1)
-------
#Метод intersection_update()сохранит только те элементы, которые присутствуют в обоих наборах.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
x.intersection_update(y)
print(x)
-------
#Метод intersection()вернет новый набор, содержащий только те элементы, которые присутствуют в обоих наборах.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x.intersection(y)
print(z)
-------
#Метод symmetric_difference_update()сохранит только те элементы, которые НЕ присутствуют в обоих наборах.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
x.symmetric_difference_update(y)
print(x)
-------
#Метод symmetric_difference()вернет новый набор, содержащий только те элементы, которые НЕ присутствуют в обоих наборах.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x.symmetric_difference(y)
print(z)
-------------------------------------------------- all methods
Method	Description
add()	-- Adds an element to the set
clear()	-- Removes all the elements from the set
copy()	-- Returns a copy of the set
difference()	-- Returns a set containing the difference between two or more sets
difference_update()	-- Removes the items in this set that are also included in another, specified set
discard()	-- Remove the specified item
intersection()	-- Returns a set, that is the intersection of two other sets
intersection_update()	-- Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	-- Returns whether two sets have a intersection or not
issubset()	-- Returns whether another set contains this set or not
issuperset()	-- Returns whether this set contains another set or not
pop()	-- Removes an element from the set
remove()	-- Removes the specified element
symmetric_difference()	-- Returns a set with the symmetric differences of two sets
symmetric_difference_update()	-- inserts the symmetric differences from this set and another
union()	-- Return a set containing the union of sets
update()	-- Update the set with the union of this set and others
